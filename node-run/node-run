#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
source \
  "${_crash_bash}"

# shellcheck disable=SC2034
_global_variables() {
  run_date=""
  retries_max=""
  program_path=""
  program_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "node" \
    "nodejs"
  _check_cmd \
    "npm" \
    "npm"
}

_node_run() {
  local \
    _retries_max="${1}" \
    _program="${2}" \
    _program_args=() \
    _node_path \
    _lib \
    _retry \
    _msg=()
  shift \
    2
  _program_args=(
    "$@"
  )
  _retry=1
  _lib="$( \
    npm \
      -g \
      list | \
      head \
        -n \
          1)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  for _retry \
    in $(seq "${_retries_max}"); do
    node \
      "${_program}" \
      "${_program_args[@]}"
    if [ $? -eq 0 ]; then
      _msg=(
        "Node exited gracefully."
        "Or crashed, it's not like"
        "it really tells you."
      )
      _msg_info \
        "${_msg[*]}"
      return \
        0
    else
      _msg=(
        "Contract calling error,"
        "retry '${_retry}' out of"
        "'${_retries_max}'."
      )
      _msg_error \
        "${_msg[*]}" \
        "0"
    fi
  done
  return \
    1
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "run" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "retries" \
    "max" \
    "300"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Run system-wide Node.js

Usage:
  ${app_name}
    [options]
    <program>
      [program_opts]

  options:
     -r <retries_max>       Maximum number of retries before
                            failing.
                            Default: ${retries_max}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "        Maximum retries:   ${retries_max}"
  _msg_info "           Program path:   ${program_path}"
  _msg_info "      Program arguments:"
  _display_program_args                "${program_args[@]}"
}

_display_program_args() {
  local \
    _program_args=() \
    _arg
  _program_args+=(
    "$@"
  )
  for _arg \
    in "${_program_args[@]}"; do
    _msg_info "                           ${_arg}"
  done
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'r:cvh?' \
    arg; do
  case \
    "${arg}" in
    r) override_retries_max="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'." \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No input program given." \
    0
  _set_overrides
  _usage \
    1
fi
_set \
  "program" \
  "path" \
  "${1}"
shift \
  1
program_args=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${retries_max}"
  "${program_path}"
  "${program_args[@]}"
)
_node_run \
  "${app_opts[@]}"
